name: macos-gcc

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install deps
      shell: cmd
      run: |
        brew install zlib zstd libzip qt@6

    - name: Configure CMake
      shell: cmd
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc-12 -DCMAKE_CXX_COMPILER=g++-12 -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install

    - name: Build
      shell: cmd
      # Build your program with the given configuration
      run: |
        cd /d ${{github.workspace}}/build
        cmake --build .

    #- name: Test
    #  working-directory: ${{github.workspace}}/build
    #  run: ctest -C ${{env.BUILD_TYPE}}
    #  # Execute tests defined by the CMake configuration.
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    
    - name: Install
      run: cmake --install ${{github.workspace}}
      
    - name: CPack
      run: |
        cpack ${{github.workspace}}/build -G 7Z 
    
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: DLLDeployer_macos
        path: ${{github.workspace}}/build/*.7z
        if-no-files-found: error
      

